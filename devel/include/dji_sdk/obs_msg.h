// Generated by gencpp from file dji_sdk/obs_msg.msg
// DO NOT EDIT!


#ifndef DJI_SDK_MESSAGE_OBS_MSG_H
#define DJI_SDK_MESSAGE_OBS_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dji_sdk
{
template <class ContainerAllocator>
struct obs_msg_
{
  typedef obs_msg_<ContainerAllocator> Type;

  obs_msg_()
    : is_obs(false)
    , sensor_1(false)
    , sensor_2(false)
    , sensor_3(false)
    , sensor_4(false)
    , altitude(0.0)  {
    }
  obs_msg_(const ContainerAllocator& _alloc)
    : is_obs(false)
    , sensor_1(false)
    , sensor_2(false)
    , sensor_3(false)
    , sensor_4(false)
    , altitude(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _is_obs_type;
  _is_obs_type is_obs;

   typedef uint8_t _sensor_1_type;
  _sensor_1_type sensor_1;

   typedef uint8_t _sensor_2_type;
  _sensor_2_type sensor_2;

   typedef uint8_t _sensor_3_type;
  _sensor_3_type sensor_3;

   typedef uint8_t _sensor_4_type;
  _sensor_4_type sensor_4;

   typedef float _altitude_type;
  _altitude_type altitude;




  typedef boost::shared_ptr< ::dji_sdk::obs_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dji_sdk::obs_msg_<ContainerAllocator> const> ConstPtr;

}; // struct obs_msg_

typedef ::dji_sdk::obs_msg_<std::allocator<void> > obs_msg;

typedef boost::shared_ptr< ::dji_sdk::obs_msg > obs_msgPtr;
typedef boost::shared_ptr< ::dji_sdk::obs_msg const> obs_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dji_sdk::obs_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dji_sdk::obs_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dji_sdk

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/indigo/share/nav_msgs/cmake/../msg'], 'dji_sdk': ['/home/aswath/ros/src/Onboard-SDK-ROS/dji_sdk/msg', '/home/aswath/ros/devel/share/dji_sdk/msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dji_sdk::obs_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_sdk::obs_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dji_sdk::obs_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dji_sdk::obs_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_sdk::obs_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_sdk::obs_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dji_sdk::obs_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1a90dcc1ce49971288e81168408c19f4";
  }

  static const char* value(const ::dji_sdk::obs_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1a90dcc1ce499712ULL;
  static const uint64_t static_value2 = 0x88e81168408c19f4ULL;
};

template<class ContainerAllocator>
struct DataType< ::dji_sdk::obs_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dji_sdk/obs_msg";
  }

  static const char* value(const ::dji_sdk::obs_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dji_sdk::obs_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool is_obs\n\
bool sensor_1\n\
bool sensor_2\n\
bool sensor_3\n\
bool sensor_4\n\
float32 altitude\n\
\n\
";
  }

  static const char* value(const ::dji_sdk::obs_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dji_sdk::obs_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.is_obs);
      stream.next(m.sensor_1);
      stream.next(m.sensor_2);
      stream.next(m.sensor_3);
      stream.next(m.sensor_4);
      stream.next(m.altitude);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct obs_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dji_sdk::obs_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dji_sdk::obs_msg_<ContainerAllocator>& v)
  {
    s << indent << "is_obs: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_obs);
    s << indent << "sensor_1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sensor_1);
    s << indent << "sensor_2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sensor_2);
    s << indent << "sensor_3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sensor_3);
    s << indent << "sensor_4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sensor_4);
    s << indent << "altitude: ";
    Printer<float>::stream(s, indent + "  ", v.altitude);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DJI_SDK_MESSAGE_OBS_MSG_H
