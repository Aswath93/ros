// Generated by gencpp from file stereo_slam/GraphPoses.msg
// DO NOT EDIT!


#ifndef STEREO_SLAM_MESSAGE_GRAPHPOSES_H
#define STEREO_SLAM_MESSAGE_GRAPHPOSES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace stereo_slam
{
template <class ContainerAllocator>
struct GraphPoses_
{
  typedef GraphPoses_<ContainerAllocator> Type;

  GraphPoses_()
    : header()
    , id()
    , x()
    , y()
    , z()
    , qx()
    , qy()
    , qz()
    , qw()  {
    }
  GraphPoses_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , id(_alloc)
    , x(_alloc)
    , y(_alloc)
    , z(_alloc)
    , qx(_alloc)
    , qy(_alloc)
    , qz(_alloc)
    , qw(_alloc)  {
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _id_type;
  _id_type id;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _x_type;
  _x_type x;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _y_type;
  _y_type y;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _z_type;
  _z_type z;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _qx_type;
  _qx_type qx;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _qy_type;
  _qy_type qy;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _qz_type;
  _qz_type qz;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _qw_type;
  _qw_type qw;




  typedef boost::shared_ptr< ::stereo_slam::GraphPoses_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::stereo_slam::GraphPoses_<ContainerAllocator> const> ConstPtr;

}; // struct GraphPoses_

typedef ::stereo_slam::GraphPoses_<std::allocator<void> > GraphPoses;

typedef boost::shared_ptr< ::stereo_slam::GraphPoses > GraphPosesPtr;
typedef boost::shared_ptr< ::stereo_slam::GraphPoses const> GraphPosesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::stereo_slam::GraphPoses_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::stereo_slam::GraphPoses_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace stereo_slam

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'stereo_slam': ['/home/aswath/ros/src/stereo_slam/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::stereo_slam::GraphPoses_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::stereo_slam::GraphPoses_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::stereo_slam::GraphPoses_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::stereo_slam::GraphPoses_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::stereo_slam::GraphPoses_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::stereo_slam::GraphPoses_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::stereo_slam::GraphPoses_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aef753297f6c6106581a1f6e87afa65f";
  }

  static const char* value(const ::stereo_slam::GraphPoses_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaef753297f6c6106ULL;
  static const uint64_t static_value2 = 0x581a1f6e87afa65fULL;
};

template<class ContainerAllocator>
struct DataType< ::stereo_slam::GraphPoses_<ContainerAllocator> >
{
  static const char* value()
  {
    return "stereo_slam/GraphPoses";
  }

  static const char* value(const ::stereo_slam::GraphPoses_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::stereo_slam::GraphPoses_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
int32[] id\n\
float64[] x\n\
float64[] y\n\
float64[] z\n\
float64[] qx\n\
float64[] qy\n\
float64[] qz\n\
float64[] qw\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::stereo_slam::GraphPoses_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::stereo_slam::GraphPoses_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.id);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.qx);
      stream.next(m.qy);
      stream.next(m.qz);
      stream.next(m.qw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct GraphPoses_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::stereo_slam::GraphPoses_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::stereo_slam::GraphPoses_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "id[]" << std::endl;
    for (size_t i = 0; i < v.id.size(); ++i)
    {
      s << indent << "  id[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.id[i]);
    }
    s << indent << "x[]" << std::endl;
    for (size_t i = 0; i < v.x.size(); ++i)
    {
      s << indent << "  x[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.x[i]);
    }
    s << indent << "y[]" << std::endl;
    for (size_t i = 0; i < v.y.size(); ++i)
    {
      s << indent << "  y[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.y[i]);
    }
    s << indent << "z[]" << std::endl;
    for (size_t i = 0; i < v.z.size(); ++i)
    {
      s << indent << "  z[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.z[i]);
    }
    s << indent << "qx[]" << std::endl;
    for (size_t i = 0; i < v.qx.size(); ++i)
    {
      s << indent << "  qx[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.qx[i]);
    }
    s << indent << "qy[]" << std::endl;
    for (size_t i = 0; i < v.qy.size(); ++i)
    {
      s << indent << "  qy[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.qy[i]);
    }
    s << indent << "qz[]" << std::endl;
    for (size_t i = 0; i < v.qz.size(); ++i)
    {
      s << indent << "  qz[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.qz[i]);
    }
    s << indent << "qw[]" << std::endl;
    for (size_t i = 0; i < v.qw.size(); ++i)
    {
      s << indent << "  qw[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.qw[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // STEREO_SLAM_MESSAGE_GRAPHPOSES_H
