# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dji_sdk/obs_msg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class obs_msg(genpy.Message):
  _md5sum = "1a90dcc1ce49971288e81168408c19f4"
  _type = "dji_sdk/obs_msg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool is_obs
bool sensor_1
bool sensor_2
bool sensor_3
bool sensor_4
float32 altitude

"""
  __slots__ = ['is_obs','sensor_1','sensor_2','sensor_3','sensor_4','altitude']
  _slot_types = ['bool','bool','bool','bool','bool','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       is_obs,sensor_1,sensor_2,sensor_3,sensor_4,altitude

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(obs_msg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.is_obs is None:
        self.is_obs = False
      if self.sensor_1 is None:
        self.sensor_1 = False
      if self.sensor_2 is None:
        self.sensor_2 = False
      if self.sensor_3 is None:
        self.sensor_3 = False
      if self.sensor_4 is None:
        self.sensor_4 = False
      if self.altitude is None:
        self.altitude = 0.
    else:
      self.is_obs = False
      self.sensor_1 = False
      self.sensor_2 = False
      self.sensor_3 = False
      self.sensor_4 = False
      self.altitude = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_5Bf.pack(_x.is_obs, _x.sensor_1, _x.sensor_2, _x.sensor_3, _x.sensor_4, _x.altitude))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.is_obs, _x.sensor_1, _x.sensor_2, _x.sensor_3, _x.sensor_4, _x.altitude,) = _struct_5Bf.unpack(str[start:end])
      self.is_obs = bool(self.is_obs)
      self.sensor_1 = bool(self.sensor_1)
      self.sensor_2 = bool(self.sensor_2)
      self.sensor_3 = bool(self.sensor_3)
      self.sensor_4 = bool(self.sensor_4)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_5Bf.pack(_x.is_obs, _x.sensor_1, _x.sensor_2, _x.sensor_3, _x.sensor_4, _x.altitude))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.is_obs, _x.sensor_1, _x.sensor_2, _x.sensor_3, _x.sensor_4, _x.altitude,) = _struct_5Bf.unpack(str[start:end])
      self.is_obs = bool(self.is_obs)
      self.sensor_1 = bool(self.sensor_1)
      self.sensor_2 = bool(self.sensor_2)
      self.sensor_3 = bool(self.sensor_3)
      self.sensor_4 = bool(self.sensor_4)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_5Bf = struct.Struct("<5Bf")
